using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerSyncModel
{
    // [RealtimeProperty(1, false, true)]
    // private string _side;

    [RealtimeProperty(2, true, true)]
    private string _side;

    [RealtimeProperty(3, true, true)]
    private bool _grounded;

    [RealtimeProperty(4, true, true)]
    private bool _dead;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerSyncModel : RealtimeModel {
    public string side {
        get {
            return _sideProperty.value;
        }
        set {
            if (_sideProperty.value == value) return;
            _sideProperty.value = value;
            InvalidateReliableLength();
            FireSideDidChange(value);
        }
    }
    
    public bool grounded {
        get {
            return _groundedProperty.value;
        }
        set {
            if (_groundedProperty.value == value) return;
            _groundedProperty.value = value;
            InvalidateReliableLength();
            FireGroundedDidChange(value);
        }
    }
    
    public bool dead {
        get {
            return _deadProperty.value;
        }
        set {
            if (_deadProperty.value == value) return;
            _deadProperty.value = value;
            InvalidateReliableLength();
            FireDeadDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PlayerSyncModel model, T value);
    public event PropertyChangedHandler<string> sideDidChange;
    public event PropertyChangedHandler<bool> groundedDidChange;
    public event PropertyChangedHandler<bool> deadDidChange;
    
    public enum PropertyID : uint {
        Side = 2,
        Grounded = 3,
        Dead = 4,
    }
    
    #region Properties
    
    private ReliableProperty<string> _sideProperty;
    
    private ReliableProperty<bool> _groundedProperty;
    
    private ReliableProperty<bool> _deadProperty;
    
    #endregion
    
    public PlayerSyncModel() : base(null) {
        _sideProperty = new ReliableProperty<string>(2, _side);
        _groundedProperty = new ReliableProperty<bool>(3, _grounded);
        _deadProperty = new ReliableProperty<bool>(4, _dead);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _sideProperty.UnsubscribeCallback();
        _groundedProperty.UnsubscribeCallback();
        _deadProperty.UnsubscribeCallback();
    }
    
    private void FireSideDidChange(string value) {
        try {
            sideDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGroundedDidChange(bool value) {
        try {
            groundedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireDeadDidChange(bool value) {
        try {
            deadDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _sideProperty.WriteLength(context);
        length += _groundedProperty.WriteLength(context);
        length += _deadProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _sideProperty.Write(stream, context);
        writes |= _groundedProperty.Write(stream, context);
        writes |= _deadProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Side: {
                    changed = _sideProperty.Read(stream, context);
                    if (changed) FireSideDidChange(side);
                    break;
                }
                case (uint) PropertyID.Grounded: {
                    changed = _groundedProperty.Read(stream, context);
                    if (changed) FireGroundedDidChange(grounded);
                    break;
                }
                case (uint) PropertyID.Dead: {
                    changed = _deadProperty.Read(stream, context);
                    if (changed) FireDeadDidChange(dead);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _side = side;
        _grounded = grounded;
        _dead = dead;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */

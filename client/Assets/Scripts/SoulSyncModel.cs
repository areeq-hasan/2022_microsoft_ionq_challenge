using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class SoulSyncModel
{
    // [RealtimeProperty(1, true, true)]
    // private float _neitherLive;

    // [RealtimeProperty(2, true, true)]
    // private float _rightyLives;

    // [RealtimeProperty(3, true, true)]
    // private float _leftyLives;

    // [RealtimeProperty(4, true, true)]
    // private float _bothLive;

    [RealtimeProperty(5, true, true)]
    private Vector2 _neitherLive;

    [RealtimeProperty(6, true, true)]
    private Vector2 _rightyLives;

    [RealtimeProperty(7, true, true)]
    private Vector2 _leftyLives;

    [RealtimeProperty(8, true, true)]
    private Vector2 _bothLive;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class SoulSyncModel : RealtimeModel {
    public UnityEngine.Vector2 neitherLive {
        get {
            return _neitherLiveProperty.value;
        }
        set {
            if (_neitherLiveProperty.value == value) return;
            _neitherLiveProperty.value = value;
            InvalidateReliableLength();
            FireNeitherLiveDidChange(value);
        }
    }
    
    public UnityEngine.Vector2 rightyLives {
        get {
            return _rightyLivesProperty.value;
        }
        set {
            if (_rightyLivesProperty.value == value) return;
            _rightyLivesProperty.value = value;
            InvalidateReliableLength();
            FireRightyLivesDidChange(value);
        }
    }
    
    public UnityEngine.Vector2 leftyLives {
        get {
            return _leftyLivesProperty.value;
        }
        set {
            if (_leftyLivesProperty.value == value) return;
            _leftyLivesProperty.value = value;
            InvalidateReliableLength();
            FireLeftyLivesDidChange(value);
        }
    }
    
    public UnityEngine.Vector2 bothLive {
        get {
            return _bothLiveProperty.value;
        }
        set {
            if (_bothLiveProperty.value == value) return;
            _bothLiveProperty.value = value;
            InvalidateReliableLength();
            FireBothLiveDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(SoulSyncModel model, T value);
    public event PropertyChangedHandler<UnityEngine.Vector2> neitherLiveDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector2> rightyLivesDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector2> leftyLivesDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector2> bothLiveDidChange;
    
    public enum PropertyID : uint {
        NeitherLive = 5,
        RightyLives = 6,
        LeftyLives = 7,
        BothLive = 8,
    }
    
    #region Properties
    
    private ReliableProperty<UnityEngine.Vector2> _neitherLiveProperty;
    
    private ReliableProperty<UnityEngine.Vector2> _rightyLivesProperty;
    
    private ReliableProperty<UnityEngine.Vector2> _leftyLivesProperty;
    
    private ReliableProperty<UnityEngine.Vector2> _bothLiveProperty;
    
    #endregion
    
    public SoulSyncModel() : base(null) {
        _neitherLiveProperty = new ReliableProperty<UnityEngine.Vector2>(5, _neitherLive);
        _rightyLivesProperty = new ReliableProperty<UnityEngine.Vector2>(6, _rightyLives);
        _leftyLivesProperty = new ReliableProperty<UnityEngine.Vector2>(7, _leftyLives);
        _bothLiveProperty = new ReliableProperty<UnityEngine.Vector2>(8, _bothLive);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _neitherLiveProperty.UnsubscribeCallback();
        _rightyLivesProperty.UnsubscribeCallback();
        _leftyLivesProperty.UnsubscribeCallback();
        _bothLiveProperty.UnsubscribeCallback();
    }
    
    private void FireNeitherLiveDidChange(UnityEngine.Vector2 value) {
        try {
            neitherLiveDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireRightyLivesDidChange(UnityEngine.Vector2 value) {
        try {
            rightyLivesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireLeftyLivesDidChange(UnityEngine.Vector2 value) {
        try {
            leftyLivesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBothLiveDidChange(UnityEngine.Vector2 value) {
        try {
            bothLiveDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _neitherLiveProperty.WriteLength(context);
        length += _rightyLivesProperty.WriteLength(context);
        length += _leftyLivesProperty.WriteLength(context);
        length += _bothLiveProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _neitherLiveProperty.Write(stream, context);
        writes |= _rightyLivesProperty.Write(stream, context);
        writes |= _leftyLivesProperty.Write(stream, context);
        writes |= _bothLiveProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.NeitherLive: {
                    changed = _neitherLiveProperty.Read(stream, context);
                    if (changed) FireNeitherLiveDidChange(neitherLive);
                    break;
                }
                case (uint) PropertyID.RightyLives: {
                    changed = _rightyLivesProperty.Read(stream, context);
                    if (changed) FireRightyLivesDidChange(rightyLives);
                    break;
                }
                case (uint) PropertyID.LeftyLives: {
                    changed = _leftyLivesProperty.Read(stream, context);
                    if (changed) FireLeftyLivesDidChange(leftyLives);
                    break;
                }
                case (uint) PropertyID.BothLive: {
                    changed = _bothLiveProperty.Read(stream, context);
                    if (changed) FireBothLiveDidChange(bothLive);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _neitherLive = neitherLive;
        _rightyLives = rightyLives;
        _leftyLives = leftyLives;
        _bothLive = bothLive;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
